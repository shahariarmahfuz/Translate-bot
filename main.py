import os
import requests
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import random

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи (ржирж┐ржЬрзЗрж░ ржЯрзЛржХрзЗржи ржмрж╕рж╛ржи)
TELEGRAM_BOT_TOKEN = "7669153355:AAHFQrk5U6Uqno-i4v166VRMwdN34fsq8Kk"

# API URL (ржирж┐ржЬрзЗрж░ API рж▓рж┐ржВржХ ржжрж┐ржи)
SENTENCE_API_URL = "https://translate-vrv3.onrender.com/get?level={level}"
TRANSLATE_API_URL = "https://translate-vrv3.onrender.com/translate"

# ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп рж╕ржВрж░ржХрзНрж╖ржг
user_data = {}

def escape_markdown_v2(text):
    """MarkdownV2 ржлрж░ржорзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ Escape ржХрж░рж╛"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def start(update: Update, context: CallbackContext) -> None:
    """ ржЗржЙржЬрж╛рж░ ржпржЦржи /start ржжрж┐ржмрзЗ, рждржЦржи рждрж╛ржХрзЗ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рждрзЗ ржмрж▓рж╛ рж╣ржмрзЗ """
    user_id = update.message.chat_id
    await update.message.reply_text(
        "ЁЯУК *рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржи:*\n\n"
        "рж▓рзЗржнрзЗрж▓ 1 ржерзЗржХрзЗ 100 ржПрж░ ржоржзрзНржпрзЗ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред\n"
        "ржЙржжрж╛рж╣рж░ржг: `/setlevel 10`",
        parse_mode="MarkdownV2"
    )

async def set_level(update: Update, context: CallbackContext) -> None:
    """ ржЗржЙржЬрж╛рж░ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░ржмрзЗ """
    user_id = update.message.chat_id
    try:
        level = int(context.args[0])
        if 1 <= level <= 100:
            user_data[user_id] = {"level": level}
            await update.message.reply_text(
                f"тЬЕ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: *{level}*\n\n"
                "ржПржЦржи ржЖржкржирж┐ /challenge ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред",
                parse_mode="MarkdownV2"
            )
        else:
            await update.message.reply_text("тЪая╕П рж▓рзЗржнрзЗрж▓ 1 ржерзЗржХрзЗ 100 ржПрж░ ржоржзрзНржпрзЗ рж╣рждрзЗ рж╣ржмрзЗред", parse_mode="MarkdownV2")
    except (IndexError, ValueError):
        await update.message.reply_text("тЪая╕П рж╕ржарж┐ржХ рж▓рзЗржнрзЗрж▓ ржжрж┐ржиред ржЙржжрж╛рж╣рж░ржг: `/setlevel 10`", parse_mode="MarkdownV2")

async def challenge(update: Update, context: CallbackContext) -> None:

async def handle_translation(update: Update, context: CallbackContext) -> None:
    """ ржЗржЙржЬрж╛рж░рзЗрж░ ржЙрждрзНрждрж░ API-рждрзЗ ржкрж╛ржарж┐рзЯрзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржмрзЗ """
    user_id = update.message.chat_id
    user_translation = update.message.text

    if user_id not in user_data or "sentence" not in user_data[user_id]:
        await update.message.reply_text("тЪая╕П ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ /challenge ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред", parse_mode="MarkdownV2")
        return

    bangla_sentence = user_data[user_id]["sentence"]

    # API-рждрзЗ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ
    params = {"ban": bangla_sentence, "eng": user_translation}
    response = requests.get(TRANSLATE_API_URL, params=params)

    if response.status_code == 200:
        result = response.json()

        if result["status"] == "correct":
            await update.message.reply_text(
                f"ЁЯЯв *Correct translation:* _{escape_markdown_v2(result['correct_translation'])}_",
                parse_mode="MarkdownV2"
            )
        else:
            errors = result["errors"]
            reason = result["why"]
            correction = result["correct_translation"]

            error_text = "тЭМ *Your sentence is incorrect\\!*\n\n"

            # **Spelling ржнрзБрж▓рзЗрж░ рждржерзНржп**
            spelling_error = errors.get('spelling', '')
            if spelling_error:
                error_text += f"ЁЯФа *Spelling:* _{escape_markdown_v2(spelling_error)}_\n"

            # **Grammar ржнрзБрж▓рзЗрж░ рждржерзНржп**
            grammar_error = errors.get('grammar', '')
            if grammar_error:
                error_text += f"ЁЯУЦ *Grammar:* _{escape_markdown_v2(grammar_error)}_\n"

            # **ржнрзБрж▓рзЗрж░ ржХрж╛рж░ржг ржУ ржмрзНржпрж╛ржЦрзНржпрж╛ (AI ржерзЗржХрзЗ рж╕рж░рж╛рж╕рж░рж┐)**
            incorrect_reason = escape_markdown_v2(reason["incorrect_reason"])
            correction_explanation = escape_markdown_v2(reason["correction_explanation"])
            
            error_text += f"\nтЭУ *Reason:* \n> {incorrect_reason}\n"
            error_text += f"\nЁЯЫа *Correction Explanation:* \n> {correction_explanation}\n"

            # **рж╕ржарж┐ржХ ржЕржирзБржмрж╛ржж**
            error_text += f"\nЁЯЯв *Correct translation:* _{escape_markdown_v2(correction)}_"

            await update.message.reply_text(error_text, parse_mode="MarkdownV2")
    else:
        await update.message.reply_text("тЪая╕П ржЕржирзБржмрж╛ржж ржпрж╛ржЪрж╛ржЗ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", parse_mode="MarkdownV2")

async def help_command(update: Update, context: CallbackContext) -> None:
    """ ржЗржЙржЬрж╛рж░ ржпржжрж┐ /help ржХржорж╛ржирзНржб ржжрзЗрзЯ, рждрж╛рж╣рж▓рзЗ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ """
    await update.message.reply_text(
        "ЁЯУЦ *ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рзЯржо:*\n"
        "1я╕ПтГг `/setlevel <рж▓рзЗржнрзЗрж▓>` ржжрж┐рзЯрзЗ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржи (1 ржерзЗржХрзЗ 100)ред\n"
        "2я╕ПтГг `/challenge` ржжрж┐рзЯрзЗ ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ рж╢рзБрж░рзБ ржХрж░рзБржиред\n"
        "3я╕ПтГг ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржПржХржЯрж┐ ржмрж╛ржВрж▓рж╛ рж╕рзЗржирзНржЯрзЗржирзНрж╕ ржжрзЗржмрзЛ, ржЖржкржирж┐ ржПрж░ ржЗржВрж░рзЗржЬрж┐ ржЕржирзБржмрж╛ржж рж▓рж┐ржЦрзБржиред\n"
        "4я╕ПтГг ржЖржорж░рж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ ржмрж▓ржм рж╕ржарж┐ржХ ржирж╛ржХрж┐ ржнрзБрж▓!\n\n"
        "тЬЕ рж╕ржарж┐ржХ рж╣рж▓рзЗ ржЖржкржирж┐ ржЬрж┐рждрзЗ ржпрж╛ржмрзЗржи ЁЯОЙ\n"
        "тЭМ ржнрзБрж▓ рж╣рж▓рзЗ ржЖржорж░рж╛ ржнрзБрж▓ржЯрж┐ рж╕ржВрж╢рзЛржзржи ржХрж░рзЗ ржжрзЗржЦрж╛ржмрзЛред\n"
        "ЁЯЪА рж╢рж┐ржЦрзБржи ржПржмржВ ржЙржирзНржирждрж┐ ржХрж░рзБржи!",
        parse_mode="MarkdownV2"
    )

def main():
    """ ржкрзНрж░ржзрж╛ржи ржлрж╛ржВрж╢ржи ржпрзЗржЦрж╛ржирзЗ ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗ """
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setlevel", set_level))
    app.add_handler(CommandHandler("challenge", challenge))
    app.add_handler(CommandHandler("help", help_command))

    # ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЗржЙржЬрж╛рж░ ржпрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржмрзЗ рж╕рзЗржЯрж┐ рж╣рзНржпрж╛ржирзНржбрж▓ ржХрж░ржмрзЗ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation))

    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи
    print("ЁЯдЦ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
