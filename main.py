import os
import requests
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи (ржирж┐ржЬрзЗрж░ ржЯрзЛржХрзЗржи ржмрж╕рж╛ржи)
TELEGRAM_BOT_TOKEN = "7669153355:AAHFQrk5U6Uqno-i4v166VRMwdN34fsq8Kk"

# API URLs
SENTENCE_API_URL = "https://translate-vrv3.onrender.com/get"
TRANSLATE_API_URL = "https://new-ai-buxr.onrender.com/translate"

# ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп рж╕ржВрж░ржХрзНрж╖ржг (рж▓рзЗржнрзЗрж▓ ржПржмржВ ржмрж░рзНрждржорж╛ржи ржмрж╛ржХрзНржп)
user_data = {}

def escape_markdown_v2(text):
    """MarkdownV2 ржлрж░ржорзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ Escape ржХрж░рж╛"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def start(update: Update, context: CallbackContext) -> None:
    """ржЗржЙржЬрж╛рж░ржХрзЗ ржирждрзБржи ржмрж╛ржХрзНржп ржкрзНрж░ржжрж╛ржи"""
    user_id = update.message.chat_id
    
    # рж▓рзЗржнрзЗрж▓ ржЪрзЗржХ ржХрж░рзБржи
    if user_id not in user_data or 'level' not in user_data[user_id]:
        await update.message.reply_text(
            "тЪая╕П ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЖржкржирж╛рж░ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржи:\n\n"
            "ржЙржжрж╛рж╣рж░ржг: `/setlevel beginner`\n\n"
            "рж▓рзЗржнрзЗрж▓ ржЕржкрж╢ржирж╕ржорзВрж╣: beginner, intermediate, advanced",
            parse_mode="MarkdownV2"
        )
        return
    
    # API ржерзЗржХрзЗ ржмрж╛ржХрзНржп fetch ржХрж░рзБржи
    level = user_data[user_id]['level']
    try:
        response = requests.get(SENTENCE_API_URL, params={'level': level})
        response.raise_for_status()
        data = response.json()
        sentence = data.get('sentence', '')
        
        if not sentence:
            raise ValueError("Empty sentence received")
        
        # ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЖржкржбрзЗржЯ ржХрж░рзБржи
        user_data[user_id]['current_sentence'] = sentence
        
        await update.message.reply_text(
            f"ЁЯФа *ржЕржирзБржмрж╛ржж ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ\!*\n\nржмрж╛ржВрж▓рж╛ ржмрж╛ржХрзНржп:\n*{escape_markdown_v2(sentence)}*\n\nржЗржВрж░рзЗржЬрж┐ ржЕржирзБржмрж╛ржж рж▓рж┐ржЦрзБржи:",
            parse_mode="MarkdownV2"
        )
        
    except Exception as e:
        await update.message.reply_text("тЪая╕П ржмрж╛ржХрзНржп рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

async def set_level(update: Update, context: CallbackContext) -> None:
    """ржЗржЙржЬрж╛рж░рзЗрж░ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛"""
    user_id = update.message.chat_id
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "тЪая╕П рж▓рзЗржнрзЗрж▓ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрж░рзБржиред ржЙржжрж╛рж╣рж░ржг:\n"
            "`/setlevel beginner`\n\n"
            "рж▓рзЗржнрзЗрж▓ ржЕржкрж╢ржирж╕ржорзВрж╣:\n- beginner\n- intermediate\n- advanced",
            parse_mode="MarkdownV2"
        )
        return
    
    level = args[0].lower()
    valid_levels = ['beginner', 'intermediate', 'advanced']
    
    if level not in valid_levels:
        await update.message.reply_text(
            "тЭМ ржЕржХрж╛рж░рзНржпржХрж░ рж▓рзЗржнрзЗрж▓! ржмрзИржз ржЕржкрж╢ржи:\n"
            "- beginner\n- intermediate\n- advanced"
        )
        return
    
    # ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЖржкржбрзЗржЯ ржХрж░рзБржи
    user_data[user_id] = {'level': level}
    
    await update.message.reply_text(
        f"тЬЕ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: *{level}*\n\n"
        "ржирждрзБржи ржмрж╛ржХрзНржп ржкрзЗрждрзЗ `/start` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред",
        parse_mode="MarkdownV2"
    )

async def handle_translation(update: Update, context: CallbackContext) -> None:
    """ржЗржЙржЬрж╛рж░рзЗрж░ ржЙрждрзНрждрж░ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи"""
    user_id = update.message.chat_id
    user_translation = update.message.text.strip()

    # ржЗржЙржЬрж╛рж░ ржбрзЗржЯрж╛ ржЪрзЗржХ ржХрж░рзБржи
    if user_id not in user_data or 'current_sentence' not in user_data[user_id]:
        await update.message.reply_text("тЪая╕П ржкрзНрж░ржержорзЗ `/start` ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред", parse_mode="MarkdownV2")
        return

    bangla_sentence = user_data[user_id]['current_sentence']

    # API-рждрзЗ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ
    params = {"ban": bangla_sentence, "eng": user_translation}
    try:
        response = requests.get(TRANSLATE_API_URL, params=params)
        response.raise_for_status()
        result = response.json()

        if result["status"] == "correct":
            reply_text = f"ЁЯОЙ *рж╕ржарж┐ржХ ржЙрждрзНрждрж░!*\n\nрж╕ржарж┐ржХ ржЕржирзБржмрж╛ржж:\n_{escape_markdown_v2(result['correct_translation'])}_"
        else:
            # ржнрзБрж▓ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рждрзИрж░рж┐ ржХрж░рзБржи
            errors = []
            if 'spelling' in result['errors']:
                errors.append(f"тЬНя╕П ржмрж╛ржирж╛ржи ржнрзБрж▓: {escape_markdown_v2(result['errors']['spelling'])}")
            if 'grammar' in result['errors']:
                errors.append(f"ЁЯУЦ ржмрзНржпрж╛ржХрж░ржг ржнрзБрж▓: {escape_markdown_v2(result['errors']['grammar']}")

            reply_text = (
                f"тЭМ *ржнрзБрж▓ ржЙрждрзНрждрж░*\n\n"
                f"{' | '.join(errors)}\n\n"
                f"ЁЯФН ржХрж╛рж░ржг: {escape_markdown_v2(result['why']['incorrect_reason'])}\n\n"
                f"тЬЕ рж╕ржВрж╢рзЛржзржи: {escape_markdown_v2(result['correct_translation'])}\n\n"
                f"ЁЯУЪ ржмрзНржпрж╛ржЦрзНржпрж╛: {escape_markdown_v2(result['why']['correction_explanation'])}"
            )

        await update.message.reply_text(reply_text, parse_mode="MarkdownV2")
        
        # рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржирждрзБржи ржмрж╛ржХрзНржп ржкрж╛ржарж╛ржирзЛ
        await start(update, context)
        
    except Exception as e:
        await update.message.reply_text("тЪая╕П ржЕржирзБржмрж╛ржж ржпрж╛ржЪрж╛ржЗ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

async def help_command(update: Update, context: CallbackContext) -> None:
    """рж╕рж╣рж╛рзЯрждрж╛ ржмрж╛рж░рзНрждрж╛"""
    help_text = (
        "ЁЯУЦ *ржмрзНржпржмрж╣рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:*\n\n"
        "1. ржкрзНрж░ржержорзЗ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржи:\n   `/setlevel <рж▓рзЗржнрзЗрж▓>`\n   (рж▓рзЗржнрзЗрж▓: beginner/intermediate/advanced)\n\n"
        "2. ржирждрзБржи ржмрж╛ржХрзНржп ржкрзЗрждрзЗ:\n   `/start`\n\n"
        "3. ржЖржкржирж╛рж░ ржЕржирзБржмрж╛ржж ржЯрж╛ржЗржк ржХрж░рзБржи ржПржмржВ AI ржлрж┐ржбржмрзНржпрж╛ржХ ржкрж╛ржи\n\n"
        "ЁЯФД рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржкрзНрж░рждрж┐ржЯрж┐ ржЙрждрзНрждрж░ ржкрж░рзЗ ржирждрзБржи ржмрж╛ржХрзНржп ржЖрж╕ржмрзЗ\n"
        "тЪЩя╕П ржпрзЗржХрзЛржирзЛ рж╕ржорзЯ рж▓рзЗржнрзЗрж▓ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи"
    )
    await update.message.reply_text(help_text, parse_mode="MarkdownV2")

def main():
    """ржкрзНрж░ржзрж╛ржи ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи"""
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setlevel", set_level))
    app.add_handler(CommandHandler("help", help_command))

    # ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation))

    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи
    print("ЁЯдЦ ржмржЯ рж╕ржХрзНрж░рж┐рзЯ...")
    app.run_polling()

if __name__ == "__main__":
    main()
