import os
import requests
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import random

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи (ржПржЯрж┐ ржирж┐ржЬрзЗрж░ ржЯрзЛржХрзЗржи ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рзБржи)
TELEGRAM_BOT_TOKEN = "7669153355:AAHFQrk5U6Uqno-i4v166VRMwdN34fsq8Kk"

# Flask рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ URL (ржПржЯрж┐ ржирж┐ржЬрзЗрж░ рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ ржарж┐ржХрж╛ржирж╛ ржжрж┐ржи)
TRANSLATE_API_URL = "https://translate-vrv3.onrender.com/translate"

# ржХрж┐ржЫрзБ ржмрж╛ржВрж▓рж╛ рж╢ржмрзНржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛
BANGLA_WORDS = [
    " рж╕рзЗ ржмржЗ ржкржбрж╝рзЗ", "ржЧрж╛ржЫ ржПрж░ ржирж┐ржЪрзЗ ржХрзЗ?", "ржЖржХрж╛рж╢ ржХржд ржмржбрж╝ !", "рж╕ржорзБржжрзНрж░ ржЕржирзЗржХ рж╕рзБржирзНржжрж░", "ржмржирзНржзрзБрж░рж╛ ржЕржирзЗржХ ржХрж╛ржЫрзЗрж░", "рж╕рзНржмржкрзНржи ржжрзЗржЦрж╛ ржнрж╛рж▓рзЛ", "ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржмржбрж╝ ржХрж░рзБржи", " рж╕рзВрж░рзНржпрзЗрж░ ржЖрж▓рзЛ ржЕржирзЗржХ рждрзАржмрзНрж░", "ржЬрж▓ ржирж┐ржпрж╝рзЗ ржпрж╛ржЗ", "ржорзЗржШ ржХрж┐ ржЕржирзЗржХ ржШржи?"
]

# ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рждржерзНржп рж╕ржВрж░ржХрзНрж╖ржг
user_data = {}

def escape_markdown_v2(text):
    """ MarkdownV2 ржлрж░ржорзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ржЧрзБрж▓рзЛ Escape ржХрж░рж╛ """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def start(update: Update, context: CallbackContext) -> None:
    """ ржпржЦржи ржЗржЙржЬрж╛рж░ /start ржХржорж╛ржирзНржб ржкрж╛ржарж╛ржмрзЗ, рждржЦржи рждрж╛ржХрзЗ ржПржХржЯрж┐ ржмрж╛ржВрж▓рж╛ рж╢ржмрзНржж ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ """
    user_id = update.message.chat_id
    word = random.choice(BANGLA_WORDS)
    user_data[user_id] = word  # ржЗржЙржЬрж╛рж░рзЗрж░ ржЬржирзНржп рж╢ржмрзНржж рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣рж▓рзЛ

    await update.message.reply_text(
        f"ЁЯФа *ржЕржирзБржмрж╛ржж ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ\!* ржирж┐ржЪрзЗрж░ ржмрж╛ржВрж▓рж╛ рж╢ржмрзНржжржЯрж┐рж░ ржЗржВрж░рзЗржЬрж┐ рж▓рж┐ржЦрзБржи:\n\n*{escape_markdown_v2(word)}*\n\nтЬНя╕П _ржЙрждрзНрждрж░ ржжрж┐ржи:_",
        parse_mode="MarkdownV2"
    )

async def handle_translation(update: Update, context: CallbackContext) -> None:
    """ ржЗржЙржЬрж╛рж░ ржпрзЗ ржЙрждрзНрждрж░ ржжрж┐ржмрзЗ рж╕рзЗржЯрж┐ API-рждрзЗ ржкрж╛ржарж┐рзЯрзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржмрзЗ """
    user_id = update.message.chat_id
    user_translation = update.message.text

    if user_id not in user_data:
        await update.message.reply_text("тЪая╕П ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ /start ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред", parse_mode="MarkdownV2")
        return

    bangla_word = user_data[user_id]

    # API-рждрзЗ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ
    params = {"ban": bangla_word, "eng": user_translation}
    response = requests.get(TRANSLATE_API_URL, params=params)

    if response.status_code == 200:
        result = response.json()

        if result["status"] == "correct":
            await update.message.reply_text(
                f"ЁЯЯв *Correct translation:* _{escape_markdown_v2(result['correct_translation'])}_",
                parse_mode="MarkdownV2"
            )
        else:
            errors = result["errors"]
            reason = result["why"]
            correction = result["correct_translation"]

            error_text = "тЭМ *Your sentence is incorrect\\!*\n\n"
            
            error_text += f"ЁЯФа *Spelling:* _{escape_markdown_v2(errors.get('spelling', 'ржмрж╛ржирж╛ржи ржнрзБрж▓ ржирзЗржЗ'))}_\n"
            error_text += f"ЁЯУЦ *Grammar:* _{escape_markdown_v2(errors.get('grammar', 'ржмрзНржпрж╛ржХрж░ржг ржнрзБрж▓ ржирзЗржЗ'))}_\n"

            error_text += f"\nтЭУ *Reason:* \n```{escape_markdown_v2(reason['incorrect_reason'])}```\n"
            error_text += f"\nтЬЕ *Correct:* \n```{escape_markdown_v2(correction)}```\n"
            error_text += f"\nЁЯЯв *Correct translation:* _{escape_markdown_v2(correction)}_"

            await update.message.reply_text(error_text, parse_mode="MarkdownV2")
    else:
        await update.message.reply_text("тЪая╕П ржЕржирзБржмрж╛ржж ржпрж╛ржЪрж╛ржЗ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", parse_mode="MarkdownV2")

async def help_command(update: Update, context: CallbackContext) -> None:
    """ ржЗржЙржЬрж╛рж░ ржпржжрж┐ /help ржХржорж╛ржирзНржб ржжрзЗрзЯ, рждрж╛ржХрзЗ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ """
    await update.message.reply_text(
        "ЁЯУЦ *ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рзЯржо:*\n"
        "1я╕ПтГг `/start` ржжрж┐ржи, ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржПржХржЯрж┐ ржмрж╛ржВрж▓рж╛ рж╢ржмрзНржж ржжрзЗржмрзЛред\n"
        "2я╕ПтГг ржЖржкржирж┐ ржПрж░ ржЗржВрж░рзЗржЬрж┐ ржЕржирзБржмрж╛ржж рж▓рж┐ржЦрзБржиред\n"
        "3я╕ПтГг ржЖржорж░рж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ ржмрж▓ржм рж╕ржарж┐ржХ ржирж╛ржХрж┐ ржнрзБрж▓!\n\n"
        "тЬЕ рж╕ржарж┐ржХ рж╣рж▓рзЗ ржЖржкржирж┐ ржЬрж┐рждрзЗ ржпрж╛ржмрзЗржи ЁЯОЙ\n"
        "тЭМ ржнрзБрж▓ рж╣рж▓рзЗ ржЖржорж░рж╛ ржнрзБрж▓ржЯрж┐ рж╕ржВрж╢рзЛржзржи ржХрж░рзЗ ржжрзЗржЦрж╛ржмрзЛред\n"
        "ЁЯЪА рж╢рж┐ржЦрзБржи ржПржмржВ ржЙржирзНржирждрж┐ ржХрж░рзБржи!",
        parse_mode="MarkdownV2"
    )

def main():
    """ ржкрзНрж░ржзрж╛ржи ржлрж╛ржВрж╢ржи ржпрзЗржЦрж╛ржирзЗ ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ рж╣ржмрзЗ """
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    # ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЗржЙржЬрж╛рж░ ржпрзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржмрзЗ рж╕рзЗржЯрж┐ рж╣рзНржпрж╛ржирзНржбрж▓ ржХрж░ржмрзЗ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation))

    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи
    print("ЁЯдЦ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
