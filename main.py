import os
import requests
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import random

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи (ржирж┐ржЬрзЗрж░ ржЯрзЛржХрзЗржи ржмрж╕рж╛ржи)
TELEGRAM_BOT_TOKEN = "7669153355:AAHFQrk5U6Uqno-i4v166VRMwdN34fsq8Kk"

# Flask API ржПрж░ URL (ржирж┐ржЬрзЗрж░ API рж▓рж┐ржВржХ ржжрж┐ржи)
TRANSLATE_API_URL = "https://new-ai-buxr.onrender.com/translate"
SENTENCE_API_URL = "https://translate-vrv3.onrender.com/get"

# ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп рж╕ржВрж░ржХрзНрж╖ржг (рж▓рзЗржнрзЗрж▓ ржПржмржВ ржмрж░рзНрждржорж╛ржи ржмрж╛ржХрзНржп)
user_data = {}

def escape_markdown_v2(text):
    """MarkdownV2 ржлрж░ржорзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп ржмрж┐рж╢рзЗрж╖ ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ Escape ржХрж░рж╛"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

async def start(update: Update, context: CallbackContext) -> None:
    """ржЗржЙржЬрж╛рж░ржХрзЗ ржирждрзБржи ржмрж╛ржВрж▓рж╛ ржмрж╛ржХрзНржп ржкрзНрж░ржжрж╛ржи"""
    user_id = update.message.chat_id
    
    # рж▓рзЗржнрзЗрж▓ ржЪрзЗржХ ржХрж░рж╛
    if user_id not in user_data or 'level' not in user_data[user_id]:
        await update.message.reply_text(
            "тЪая╕П ржкрзНрж░ржержорзЗ ржЖржкржирж╛рж░ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржи /setlevel ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗред ржЙржжрж╛рж╣рж░ржг: `/setlevel 5`",
            parse_mode="MarkdownV2"
        )
        return
    
    level = user_data[user_id]['level']
    
    # API ржерзЗржХрзЗ ржмрж╛ржВрж▓рж╛ ржмрж╛ржХрзНржп ржлрзЗржЪ ржХрж░рж╛
    try:
        response = requests.get(f"{SENTENCE_API_URL}?level={level}")
        if response.status_code == 200:
            data = response.json()
            sentence = data.get("sentence", "")
            if not sentence:
                raise ValueError("Empty sentence received")
            
            # ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ ржЖржкржбрзЗржЯ
            user_data[user_id]['current_sentence'] = sentence
            
            await update.message.reply_text(
                f"ЁЯФа *ржЕржирзБржмрж╛ржж ржЪрзНржпрж╛рж▓рзЗржЮрзНржЬ\!* ржирж┐ржЪрзЗрж░ ржмрж╛ржВрж▓рж╛ ржмрж╛ржХрзНржпржЯрж┐рж░ ржЗржВрж░рзЗржЬрж┐ рж▓рж┐ржЦрзБржи:\n\n*{escape_markdown_v2(sentence)}*\n\nтЬНя╕П _ржЙрждрзНрждрж░ ржжрж┐ржи:_",
                parse_mode="MarkdownV2"
            )
        else:
            await update.message.reply_text("тЪая╕П ржмрж╛ржХрзНржп рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
    
    except Exception as e:
        print(f"API Error: {e}")
        await update.message.reply_text("тЪая╕П рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржмрж╛ржХрзНржп ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

async def set_level(update: Update, context: CallbackContext) -> None:
    """ржЗржЙржЬрж╛рж░рзЗрж░ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛"""
    user_id = update.message.chat_id
    args = context.args
    
    if not args or len(args) < 1:
        await update.message.reply_text("тЪая╕П рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ: `/setlevel 1-100`", parse_mode="MarkdownV2")
        return
    
    try:
        level = int(args[0])
        if 1 <= level <= 100:
            # ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ ржЖржкржбрзЗржЯ
            if user_id not in user_data:
                user_data[user_id] = {}
            user_data[user_id]['level'] = level
            await update.message.reply_text(f"тЬЕ рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: {level}\nржПржЦржи /start ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржи!")
        else:
            await update.message.reply_text("тЪая╕П рж▓рзЗржнрзЗрж▓ рзз ржерзЗржХрзЗ рззрзжрзж ржПрж░ ржоржзрзНржпрзЗ рж╣рждрзЗ рж╣ржмрзЗред")
    
    except ValueError:
        await update.message.reply_text("тЪая╕П рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржи (ржЙржжрж╛рж╣рж░ржг: /setlevel 50)")

async def handle_translation(update: Update, context: CallbackContext) -> None:
    """ржЗржЙржЬрж╛рж░рзЗрж░ ржЕржирзБржмрж╛ржж ржпрж╛ржЪрж╛ржЗ"""
    user_id = update.message.chat_id
    user_translation = update.message.text.strip()

    # ржмрж░рзНрждржорж╛ржи ржмрж╛ржХрзНржп ржЪрзЗржХ ржХрж░рж╛
    if user_id not in user_data or 'current_sentence' not in user_data[user_id]:
        await update.message.reply_text("тЪая╕П ржкрзНрж░ржержорзЗ /start ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рзБржи!", parse_mode="MarkdownV2")
        return

    bangla_sentence = user_data[user_id]['current_sentence']

    # ржЕржирзБржмрж╛ржж ржпрж╛ржЪрж╛ржЗрзЯрзЗрж░ API ржХрж▓
    params = {"ban": bangla_sentence, "eng": user_translation}
    response = requests.get(TRANSLATE_API_URL, params=params)

    if response.status_code == 200:
        result = response.json()
        
        if result["status"] == "correct":
            reply_text = f"ЁЯОЙ *рж╕ржарж┐ржХ ржЙрждрзНрждрж░!*\n\nЁЯЯв рж╕ржарж┐ржХ ржЕржирзБржмрж╛ржж: _{escape_markdown_v2(result['correct_translation'])}_"
        else:
            # ржнрзБрж▓рзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп
            errors = result.get("errors", {})
            reason = result.get("why", {})
            correction = result.get("correct_translation", "")
            
            reply_text = "тЭМ *ржнрзБрж▓ ржЙрждрзНрждрж░!*\n\n"
            
            # рж╕рзНржкрзЗрж▓рж┐ржВ ржнрзБрж▓
            if errors.get('spelling'):
                reply_text += f"ЁЯФа *ржмрж╛ржирж╛ржи ржнрзБрж▓:* _{escape_markdown_v2(errors['spelling']}_\n"
            
            # ржЧрзНрж░рж╛ржорж╛рж░ ржнрзБрж▓
            if errors.get('grammar'):
                reply_text += f"ЁЯУЦ *ржмрзНржпрж╛ржХрж░ржг ржнрзБрж▓:* _{escape_markdown_v2(errors['grammar']}_\n"
            
            # AI ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
            reply_text += f"\nтЭУ *ржХрж╛рж░ржг:*\n_{escape_markdown_v2(reason.get('incorrect_reason', ''))}_\n"
            reply_text += f"\nЁЯЫа *рж╕ржВрж╢рзЛржзржи:*\n_{escape_markdown_v2(reason.get('correction_explanation', ''))}_\n"
            reply_text += f"\nЁЯЯв *рж╕ржарж┐ржХ ржЕржирзБржмрж╛ржж:* _{escape_markdown_v2(correction)}_"

        await update.message.reply_text(reply_text, parse_mode="MarkdownV2")
    
    else:
        await update.message.reply_text("тЪая╕П ржЕржирзБржмрж╛ржж ржпрж╛ржЪрж╛ржЗ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣рзЯрзЗржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")

async def help_command(update: Update, context: CallbackContext) -> None:
    """рж╣рзЗрж▓рзНржк ржорзЗрж╕рзЗржЬ"""
    help_text = (
        "ЁЯУЪ *ржмржЯ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:*\n\n"
        "1\. рж▓рзЗржнрзЗрж▓ рж╕рзЗржЯ ржХрж░рзБржи \- `/setlevel <1\-100>` \(ржпрзЗржоржи: `/setlevel 20`\)\n"
        "2\. рж╢рзБрж░рзБ ржХрж░рзБржи \- `/start` ржХржорж╛ржирзНржб ржжрж┐рзЯрзЗ ржПржХржЯрж┐ ржмрж╛ржВрж▓рж╛ ржмрж╛ржХрзНржп ржкрж╛ржи\n"
        "3\. ржЕржирзБржмрж╛ржж ржЬржорж╛ ржжрж┐ржи \- ржЗржВрж░рзЗржЬрж┐ ржЕржирзБржмрж╛ржж рж▓рж┐ржЦрзЗ рж╕рзЗржирзНржб ржХрж░рзБржи\n"
        "4\. ржлрж▓рж╛ржлрж▓ ржжрзЗржЦрзБржи \- AI ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж╕рж╣ ржЙрждрзНрждрж░ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи\n\n"
        "ЁЯФД рж▓рзЗржнрзЗрж▓ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржпрзЗржХрзЛржирзЛ рж╕ржорзЯ `/setlevel` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n"
        "ЁЯЖШ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп /help рж▓рж┐ржЦрзБржи"
    )
    await update.message.reply_text(help_text, parse_mode="MarkdownV2")

def main():
    """ржкрзНрж░ржзрж╛ржи ржлрж╛ржВрж╢ржи"""
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setlevel", set_level))
    app.add_handler(CommandHandler("help", help_command))

    # ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation))

    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи
    print("ЁЯдЦ ржмржЯ рж╕ржХрзНрж░рж┐рзЯ...")
    app.run_polling()

if __name__ == "__main__":
    main()
